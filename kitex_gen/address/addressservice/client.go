// Code generated by Kitex v0.12.1. DO NOT EDIT.

package addressservice

import (
	"context"
	address "github.com/123508/douyinshop/kitex_gen/address"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	AddAddress(ctx context.Context, Req *address.AddAddressReq, callOptions ...callopt.Option) (r *address.AddAddressResp, err error)
	GetAddressList(ctx context.Context, Req *address.GetAddressListReq, callOptions ...callopt.Option) (r *address.GetAddressListResp, err error)
	DeleteAddress(ctx context.Context, Req *address.DeleteAddressReq, callOptions ...callopt.Option) (r *address.DeleteAddressResp, err error)
	UpdateAddress(ctx context.Context, Req *address.UpdateAddressReq, callOptions ...callopt.Option) (r *address.UpdateAddressResp, err error)
	SetDefaultAddress(ctx context.Context, Req *address.SetDefaultAddressReq, callOptions ...callopt.Option) (r *address.SetDefaultAddressResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kAddressServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kAddressServiceClient struct {
	*kClient
}

func (p *kAddressServiceClient) AddAddress(ctx context.Context, Req *address.AddAddressReq, callOptions ...callopt.Option) (r *address.AddAddressResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddAddress(ctx, Req)
}

func (p *kAddressServiceClient) GetAddressList(ctx context.Context, Req *address.GetAddressListReq, callOptions ...callopt.Option) (r *address.GetAddressListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetAddressList(ctx, Req)
}

func (p *kAddressServiceClient) DeleteAddress(ctx context.Context, Req *address.DeleteAddressReq, callOptions ...callopt.Option) (r *address.DeleteAddressResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteAddress(ctx, Req)
}

func (p *kAddressServiceClient) UpdateAddress(ctx context.Context, Req *address.UpdateAddressReq, callOptions ...callopt.Option) (r *address.UpdateAddressResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateAddress(ctx, Req)
}

func (p *kAddressServiceClient) SetDefaultAddress(ctx context.Context, Req *address.SetDefaultAddressReq, callOptions ...callopt.Option) (r *address.SetDefaultAddressResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SetDefaultAddress(ctx, Req)
}
