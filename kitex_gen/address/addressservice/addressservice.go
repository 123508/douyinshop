// Code generated by Kitex v0.12.1. DO NOT EDIT.

package addressservice

import (
	"context"
	"errors"
	address "github.com/123508/douyinshop/kitex_gen/address"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"AddAddress": kitex.NewMethodInfo(
		addAddressHandler,
		newAddAddressArgs,
		newAddAddressResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetAddressList": kitex.NewMethodInfo(
		getAddressListHandler,
		newGetAddressListArgs,
		newGetAddressListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteAddress": kitex.NewMethodInfo(
		deleteAddressHandler,
		newDeleteAddressArgs,
		newDeleteAddressResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateAddress": kitex.NewMethodInfo(
		updateAddressHandler,
		newUpdateAddressArgs,
		newUpdateAddressResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SetDefaultAddress": kitex.NewMethodInfo(
		setDefaultAddressHandler,
		newSetDefaultAddressArgs,
		newSetDefaultAddressResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	addressServiceServiceInfo                = NewServiceInfo()
	addressServiceServiceInfoForClient       = NewServiceInfoForClient()
	addressServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return addressServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return addressServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return addressServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "AddressService"
	handlerType := (*address.AddressService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "address",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.1",
		Extra:           extra,
	}
	return svcInfo
}

func addAddressHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(address.AddAddressReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(address.AddressService).AddAddress(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *AddAddressArgs:
		success, err := handler.(address.AddressService).AddAddress(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AddAddressResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newAddAddressArgs() interface{} {
	return &AddAddressArgs{}
}

func newAddAddressResult() interface{} {
	return &AddAddressResult{}
}

type AddAddressArgs struct {
	Req *address.AddAddressReq
}

func (p *AddAddressArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(address.AddAddressReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AddAddressArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AddAddressArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AddAddressArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *AddAddressArgs) Unmarshal(in []byte) error {
	msg := new(address.AddAddressReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AddAddressArgs_Req_DEFAULT *address.AddAddressReq

func (p *AddAddressArgs) GetReq() *address.AddAddressReq {
	if !p.IsSetReq() {
		return AddAddressArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AddAddressArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AddAddressArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AddAddressResult struct {
	Success *address.AddAddressResp
}

var AddAddressResult_Success_DEFAULT *address.AddAddressResp

func (p *AddAddressResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(address.AddAddressResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AddAddressResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AddAddressResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AddAddressResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *AddAddressResult) Unmarshal(in []byte) error {
	msg := new(address.AddAddressResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AddAddressResult) GetSuccess() *address.AddAddressResp {
	if !p.IsSetSuccess() {
		return AddAddressResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AddAddressResult) SetSuccess(x interface{}) {
	p.Success = x.(*address.AddAddressResp)
}

func (p *AddAddressResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AddAddressResult) GetResult() interface{} {
	return p.Success
}

func getAddressListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(address.GetAddressListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(address.AddressService).GetAddressList(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetAddressListArgs:
		success, err := handler.(address.AddressService).GetAddressList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetAddressListResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetAddressListArgs() interface{} {
	return &GetAddressListArgs{}
}

func newGetAddressListResult() interface{} {
	return &GetAddressListResult{}
}

type GetAddressListArgs struct {
	Req *address.GetAddressListReq
}

func (p *GetAddressListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(address.GetAddressListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetAddressListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetAddressListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetAddressListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetAddressListArgs) Unmarshal(in []byte) error {
	msg := new(address.GetAddressListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetAddressListArgs_Req_DEFAULT *address.GetAddressListReq

func (p *GetAddressListArgs) GetReq() *address.GetAddressListReq {
	if !p.IsSetReq() {
		return GetAddressListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetAddressListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetAddressListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetAddressListResult struct {
	Success *address.GetAddressListResp
}

var GetAddressListResult_Success_DEFAULT *address.GetAddressListResp

func (p *GetAddressListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(address.GetAddressListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetAddressListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetAddressListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetAddressListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetAddressListResult) Unmarshal(in []byte) error {
	msg := new(address.GetAddressListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetAddressListResult) GetSuccess() *address.GetAddressListResp {
	if !p.IsSetSuccess() {
		return GetAddressListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetAddressListResult) SetSuccess(x interface{}) {
	p.Success = x.(*address.GetAddressListResp)
}

func (p *GetAddressListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetAddressListResult) GetResult() interface{} {
	return p.Success
}

func deleteAddressHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(address.DeleteAddressReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(address.AddressService).DeleteAddress(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteAddressArgs:
		success, err := handler.(address.AddressService).DeleteAddress(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteAddressResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteAddressArgs() interface{} {
	return &DeleteAddressArgs{}
}

func newDeleteAddressResult() interface{} {
	return &DeleteAddressResult{}
}

type DeleteAddressArgs struct {
	Req *address.DeleteAddressReq
}

func (p *DeleteAddressArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(address.DeleteAddressReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteAddressArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteAddressArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteAddressArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteAddressArgs) Unmarshal(in []byte) error {
	msg := new(address.DeleteAddressReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteAddressArgs_Req_DEFAULT *address.DeleteAddressReq

func (p *DeleteAddressArgs) GetReq() *address.DeleteAddressReq {
	if !p.IsSetReq() {
		return DeleteAddressArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteAddressArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteAddressArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteAddressResult struct {
	Success *address.DeleteAddressResp
}

var DeleteAddressResult_Success_DEFAULT *address.DeleteAddressResp

func (p *DeleteAddressResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(address.DeleteAddressResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteAddressResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteAddressResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteAddressResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteAddressResult) Unmarshal(in []byte) error {
	msg := new(address.DeleteAddressResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteAddressResult) GetSuccess() *address.DeleteAddressResp {
	if !p.IsSetSuccess() {
		return DeleteAddressResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteAddressResult) SetSuccess(x interface{}) {
	p.Success = x.(*address.DeleteAddressResp)
}

func (p *DeleteAddressResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteAddressResult) GetResult() interface{} {
	return p.Success
}

func updateAddressHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(address.UpdateAddressReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(address.AddressService).UpdateAddress(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateAddressArgs:
		success, err := handler.(address.AddressService).UpdateAddress(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateAddressResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateAddressArgs() interface{} {
	return &UpdateAddressArgs{}
}

func newUpdateAddressResult() interface{} {
	return &UpdateAddressResult{}
}

type UpdateAddressArgs struct {
	Req *address.UpdateAddressReq
}

func (p *UpdateAddressArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(address.UpdateAddressReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateAddressArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateAddressArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateAddressArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateAddressArgs) Unmarshal(in []byte) error {
	msg := new(address.UpdateAddressReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateAddressArgs_Req_DEFAULT *address.UpdateAddressReq

func (p *UpdateAddressArgs) GetReq() *address.UpdateAddressReq {
	if !p.IsSetReq() {
		return UpdateAddressArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateAddressArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateAddressArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateAddressResult struct {
	Success *address.UpdateAddressResp
}

var UpdateAddressResult_Success_DEFAULT *address.UpdateAddressResp

func (p *UpdateAddressResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(address.UpdateAddressResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateAddressResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateAddressResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateAddressResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateAddressResult) Unmarshal(in []byte) error {
	msg := new(address.UpdateAddressResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateAddressResult) GetSuccess() *address.UpdateAddressResp {
	if !p.IsSetSuccess() {
		return UpdateAddressResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateAddressResult) SetSuccess(x interface{}) {
	p.Success = x.(*address.UpdateAddressResp)
}

func (p *UpdateAddressResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateAddressResult) GetResult() interface{} {
	return p.Success
}

func setDefaultAddressHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(address.SetDefaultAddressReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(address.AddressService).SetDefaultAddress(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SetDefaultAddressArgs:
		success, err := handler.(address.AddressService).SetDefaultAddress(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SetDefaultAddressResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSetDefaultAddressArgs() interface{} {
	return &SetDefaultAddressArgs{}
}

func newSetDefaultAddressResult() interface{} {
	return &SetDefaultAddressResult{}
}

type SetDefaultAddressArgs struct {
	Req *address.SetDefaultAddressReq
}

func (p *SetDefaultAddressArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(address.SetDefaultAddressReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SetDefaultAddressArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SetDefaultAddressArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SetDefaultAddressArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SetDefaultAddressArgs) Unmarshal(in []byte) error {
	msg := new(address.SetDefaultAddressReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SetDefaultAddressArgs_Req_DEFAULT *address.SetDefaultAddressReq

func (p *SetDefaultAddressArgs) GetReq() *address.SetDefaultAddressReq {
	if !p.IsSetReq() {
		return SetDefaultAddressArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SetDefaultAddressArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SetDefaultAddressArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SetDefaultAddressResult struct {
	Success *address.SetDefaultAddressResp
}

var SetDefaultAddressResult_Success_DEFAULT *address.SetDefaultAddressResp

func (p *SetDefaultAddressResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(address.SetDefaultAddressResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SetDefaultAddressResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SetDefaultAddressResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SetDefaultAddressResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SetDefaultAddressResult) Unmarshal(in []byte) error {
	msg := new(address.SetDefaultAddressResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SetDefaultAddressResult) GetSuccess() *address.SetDefaultAddressResp {
	if !p.IsSetSuccess() {
		return SetDefaultAddressResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SetDefaultAddressResult) SetSuccess(x interface{}) {
	p.Success = x.(*address.SetDefaultAddressResp)
}

func (p *SetDefaultAddressResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SetDefaultAddressResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AddAddress(ctx context.Context, Req *address.AddAddressReq) (r *address.AddAddressResp, err error) {
	var _args AddAddressArgs
	_args.Req = Req
	var _result AddAddressResult
	if err = p.c.Call(ctx, "AddAddress", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAddressList(ctx context.Context, Req *address.GetAddressListReq) (r *address.GetAddressListResp, err error) {
	var _args GetAddressListArgs
	_args.Req = Req
	var _result GetAddressListResult
	if err = p.c.Call(ctx, "GetAddressList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteAddress(ctx context.Context, Req *address.DeleteAddressReq) (r *address.DeleteAddressResp, err error) {
	var _args DeleteAddressArgs
	_args.Req = Req
	var _result DeleteAddressResult
	if err = p.c.Call(ctx, "DeleteAddress", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateAddress(ctx context.Context, Req *address.UpdateAddressReq) (r *address.UpdateAddressResp, err error) {
	var _args UpdateAddressArgs
	_args.Req = Req
	var _result UpdateAddressResult
	if err = p.c.Call(ctx, "UpdateAddress", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetDefaultAddress(ctx context.Context, Req *address.SetDefaultAddressReq) (r *address.SetDefaultAddressResp, err error) {
	var _args SetDefaultAddressArgs
	_args.Req = Req
	var _result SetDefaultAddressResult
	if err = p.c.Call(ctx, "SetDefaultAddress", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
