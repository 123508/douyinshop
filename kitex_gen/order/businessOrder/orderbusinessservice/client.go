// Code generated by Kitex v0.12.1. DO NOT EDIT.

package orderbusinessservice

import (
	"context"
	businessOrder "github.com/123508/douyinshop/kitex_gen/order/businessOrder"
	order_common "github.com/123508/douyinshop/kitex_gen/order/order_common"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	GetOrderList(ctx context.Context, Req *businessOrder.GetOrderListReq, callOptions ...callopt.Option) (r *businessOrder.GetOrderListResp, err error)
	Detail(ctx context.Context, Req *order_common.OrderReq, callOptions ...callopt.Option) (r *order_common.OrderResp, err error)
	Confirm(ctx context.Context, Req *businessOrder.ConfirmReq, callOptions ...callopt.Option) (r *order_common.Empty, err error)
	Delivery(ctx context.Context, Req *businessOrder.DeliveryReq, callOptions ...callopt.Option) (r *order_common.Empty, err error)
	Receive(ctx context.Context, Req *businessOrder.ReceiveReq, callOptions ...callopt.Option) (r *order_common.Empty, err error)
	Rejection(ctx context.Context, Req *businessOrder.ReceiveReq, callOptions ...callopt.Option) (r *order_common.Empty, err error)
	Cancel(ctx context.Context, Req *order_common.CancelReq, callOptions ...callopt.Option) (r *order_common.Empty, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kOrderBusinessServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kOrderBusinessServiceClient struct {
	*kClient
}

func (p *kOrderBusinessServiceClient) GetOrderList(ctx context.Context, Req *businessOrder.GetOrderListReq, callOptions ...callopt.Option) (r *businessOrder.GetOrderListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetOrderList(ctx, Req)
}

func (p *kOrderBusinessServiceClient) Detail(ctx context.Context, Req *order_common.OrderReq, callOptions ...callopt.Option) (r *order_common.OrderResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Detail(ctx, Req)
}

func (p *kOrderBusinessServiceClient) Confirm(ctx context.Context, Req *businessOrder.ConfirmReq, callOptions ...callopt.Option) (r *order_common.Empty, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Confirm(ctx, Req)
}

func (p *kOrderBusinessServiceClient) Delivery(ctx context.Context, Req *businessOrder.DeliveryReq, callOptions ...callopt.Option) (r *order_common.Empty, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Delivery(ctx, Req)
}

func (p *kOrderBusinessServiceClient) Receive(ctx context.Context, Req *businessOrder.ReceiveReq, callOptions ...callopt.Option) (r *order_common.Empty, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Receive(ctx, Req)
}

func (p *kOrderBusinessServiceClient) Rejection(ctx context.Context, Req *businessOrder.ReceiveReq, callOptions ...callopt.Option) (r *order_common.Empty, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Rejection(ctx, Req)
}

func (p *kOrderBusinessServiceClient) Cancel(ctx context.Context, Req *order_common.CancelReq, callOptions ...callopt.Option) (r *order_common.Empty, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Cancel(ctx, Req)
}
