// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package businessOrder

import (
	fmt "fmt"
	order_common "github.com/123508/douyinshop/kitex_gen/order/order_common"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *ConfirmReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ConfirmReq[number], err)
}

func (x *ConfirmReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *ConfirmReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *RejectionReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RejectionReq[number], err)
}

func (x *RejectionReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *RejectionReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.RejectionReason, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeliveryReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeliveryReq[number], err)
}

func (x *DeliveryReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *ReceiveReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ReceiveReq[number], err)
}

func (x *ReceiveReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *GetOrderListReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetOrderListReq[number], err)
}

func (x *GetOrderListReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ShopId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *GetOrderListReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Page, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *GetOrderListReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.PageSize, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *GetOrderListResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetOrderListResp[number], err)
}

func (x *GetOrderListResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v order_common.OrderResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.List = append(x.List, &v)
	return offset, nil
}

func (x *Notify) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Notify[number], err)
}

func (x *Notify) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *Notify) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Content, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetNotifyReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetNotifyReq[number], err)
}

func (x *GetNotifyReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *GetNotifyResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetNotifyResp[number], err)
}

func (x *GetNotifyResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Notify
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Notify = &v
	return offset, nil
}

func (x *ConfirmReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ConfirmReq) fastWriteField1(buf []byte) (offset int) {
	if x.OrderId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetOrderId())
	return offset
}

func (x *ConfirmReq) fastWriteField2(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetStatus())
	return offset
}

func (x *RejectionReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *RejectionReq) fastWriteField1(buf []byte) (offset int) {
	if x.OrderId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetOrderId())
	return offset
}

func (x *RejectionReq) fastWriteField2(buf []byte) (offset int) {
	if x.RejectionReason == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetRejectionReason())
	return offset
}

func (x *DeliveryReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeliveryReq) fastWriteField1(buf []byte) (offset int) {
	if x.OrderId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetOrderId())
	return offset
}

func (x *ReceiveReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ReceiveReq) fastWriteField1(buf []byte) (offset int) {
	if x.OrderId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetOrderId())
	return offset
}

func (x *GetOrderListReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetOrderListReq) fastWriteField1(buf []byte) (offset int) {
	if x.ShopId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetShopId())
	return offset
}

func (x *GetOrderListReq) fastWriteField2(buf []byte) (offset int) {
	if x.Page == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 2, x.GetPage())
	return offset
}

func (x *GetOrderListReq) fastWriteField3(buf []byte) (offset int) {
	if x.PageSize == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 3, x.GetPageSize())
	return offset
}

func (x *GetOrderListResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetOrderListResp) fastWriteField1(buf []byte) (offset int) {
	if x.List == nil {
		return offset
	}
	for i := range x.GetList() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetList()[i])
	}
	return offset
}

func (x *Notify) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *Notify) fastWriteField1(buf []byte) (offset int) {
	if x.OrderId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetOrderId())
	return offset
}

func (x *Notify) fastWriteField2(buf []byte) (offset int) {
	if x.Content == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetContent())
	return offset
}

func (x *GetNotifyReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetNotifyReq) fastWriteField2(buf []byte) (offset int) {
	if x.OrderId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 2, x.GetOrderId())
	return offset
}

func (x *GetNotifyResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetNotifyResp) fastWriteField1(buf []byte) (offset int) {
	if x.Notify == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetNotify())
	return offset
}

func (x *ConfirmReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ConfirmReq) sizeField1() (n int) {
	if x.OrderId == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetOrderId())
	return n
}

func (x *ConfirmReq) sizeField2() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetStatus())
	return n
}

func (x *RejectionReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *RejectionReq) sizeField1() (n int) {
	if x.OrderId == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetOrderId())
	return n
}

func (x *RejectionReq) sizeField2() (n int) {
	if x.RejectionReason == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetRejectionReason())
	return n
}

func (x *DeliveryReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeliveryReq) sizeField1() (n int) {
	if x.OrderId == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetOrderId())
	return n
}

func (x *ReceiveReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ReceiveReq) sizeField1() (n int) {
	if x.OrderId == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetOrderId())
	return n
}

func (x *GetOrderListReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetOrderListReq) sizeField1() (n int) {
	if x.ShopId == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetShopId())
	return n
}

func (x *GetOrderListReq) sizeField2() (n int) {
	if x.Page == 0 {
		return n
	}
	n += fastpb.SizeUint32(2, x.GetPage())
	return n
}

func (x *GetOrderListReq) sizeField3() (n int) {
	if x.PageSize == 0 {
		return n
	}
	n += fastpb.SizeUint32(3, x.GetPageSize())
	return n
}

func (x *GetOrderListResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetOrderListResp) sizeField1() (n int) {
	if x.List == nil {
		return n
	}
	for i := range x.GetList() {
		n += fastpb.SizeMessage(1, x.GetList()[i])
	}
	return n
}

func (x *Notify) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *Notify) sizeField1() (n int) {
	if x.OrderId == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetOrderId())
	return n
}

func (x *Notify) sizeField2() (n int) {
	if x.Content == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetContent())
	return n
}

func (x *GetNotifyReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField2()
	return n
}

func (x *GetNotifyReq) sizeField2() (n int) {
	if x.OrderId == 0 {
		return n
	}
	n += fastpb.SizeUint32(2, x.GetOrderId())
	return n
}

func (x *GetNotifyResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetNotifyResp) sizeField1() (n int) {
	if x.Notify == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetNotify())
	return n
}

var fieldIDToName_ConfirmReq = map[int32]string{
	1: "OrderId",
	2: "Status",
}

var fieldIDToName_RejectionReq = map[int32]string{
	1: "OrderId",
	2: "RejectionReason",
}

var fieldIDToName_DeliveryReq = map[int32]string{
	1: "OrderId",
}

var fieldIDToName_ReceiveReq = map[int32]string{
	1: "OrderId",
}

var fieldIDToName_GetOrderListReq = map[int32]string{
	1: "ShopId",
	2: "Page",
	3: "PageSize",
}

var fieldIDToName_GetOrderListResp = map[int32]string{
	1: "List",
}

var fieldIDToName_Notify = map[int32]string{
	1: "OrderId",
	2: "Content",
}

var fieldIDToName_GetNotifyReq = map[int32]string{
	2: "OrderId",
}

var fieldIDToName_GetNotifyResp = map[int32]string{
	1: "Notify",
}

var _ = order_common.File_order_bitjump_order_common_proto
