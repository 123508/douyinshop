// Code generated by Kitex v0.12.1. DO NOT EDIT.

package orderuserservice

import (
	"context"
	order_common "github.com/123508/douyinshop/kitex_gen/order/order_common"
	userOrder "github.com/123508/douyinshop/kitex_gen/order/userOrder"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Submit(ctx context.Context, Req *userOrder.OrderSubmitReq, callOptions ...callopt.Option) (r *userOrder.OrderSubmitResp, err error)
	History(ctx context.Context, Req *userOrder.HistoryReq, callOptions ...callopt.Option) (r *userOrder.HistoryResp, err error)
	Detail(ctx context.Context, Req *order_common.OrderReq, callOptions ...callopt.Option) (r *order_common.OrderResp, err error)
	Cancel(ctx context.Context, Req *order_common.CancelReq, callOptions ...callopt.Option) (r *order_common.Empty, err error)
	Reminder(ctx context.Context, Req *userOrder.ReminderReq, callOptions ...callopt.Option) (r *order_common.Empty, err error)
	Complete(ctx context.Context, Req *userOrder.CompleteReq, callOptions ...callopt.Option) (r *order_common.Empty, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kOrderUserServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kOrderUserServiceClient struct {
	*kClient
}

func (p *kOrderUserServiceClient) Submit(ctx context.Context, Req *userOrder.OrderSubmitReq, callOptions ...callopt.Option) (r *userOrder.OrderSubmitResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Submit(ctx, Req)
}

func (p *kOrderUserServiceClient) History(ctx context.Context, Req *userOrder.HistoryReq, callOptions ...callopt.Option) (r *userOrder.HistoryResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.History(ctx, Req)
}

func (p *kOrderUserServiceClient) Detail(ctx context.Context, Req *order_common.OrderReq, callOptions ...callopt.Option) (r *order_common.OrderResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Detail(ctx, Req)
}

func (p *kOrderUserServiceClient) Cancel(ctx context.Context, Req *order_common.CancelReq, callOptions ...callopt.Option) (r *order_common.Empty, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Cancel(ctx, Req)
}

func (p *kOrderUserServiceClient) Reminder(ctx context.Context, Req *userOrder.ReminderReq, callOptions ...callopt.Option) (r *order_common.Empty, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Reminder(ctx, Req)
}

func (p *kOrderUserServiceClient) Complete(ctx context.Context, Req *userOrder.CompleteReq, callOptions ...callopt.Option) (r *order_common.Empty, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Complete(ctx, Req)
}
