// Code generated by Kitex v0.12.1. DO NOT EDIT.

package orderuserservice

import (
	"context"
	"errors"
	order_common "github.com/123508/douyinshop/kitex_gen/order/order_common"
	userOrder "github.com/123508/douyinshop/kitex_gen/order/userOrder"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Submit": kitex.NewMethodInfo(
		submitHandler,
		newSubmitArgs,
		newSubmitResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"History": kitex.NewMethodInfo(
		historyHandler,
		newHistoryArgs,
		newHistoryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"Detail": kitex.NewMethodInfo(
		detailHandler,
		newDetailArgs,
		newDetailResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"Cancel": kitex.NewMethodInfo(
		cancelHandler,
		newCancelArgs,
		newCancelResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"Reminder": kitex.NewMethodInfo(
		reminderHandler,
		newReminderArgs,
		newReminderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"Complete": kitex.NewMethodInfo(
		completeHandler,
		newCompleteArgs,
		newCompleteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	orderUserServiceServiceInfo                = NewServiceInfo()
	orderUserServiceServiceInfoForClient       = NewServiceInfoForClient()
	orderUserServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return orderUserServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return orderUserServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return orderUserServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "OrderUserService"
	handlerType := (*userOrder.OrderUserService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "order.userOrder",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.1",
		Extra:           extra,
	}
	return svcInfo
}

func submitHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userOrder.OrderSubmitReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userOrder.OrderUserService).Submit(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SubmitArgs:
		success, err := handler.(userOrder.OrderUserService).Submit(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SubmitResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSubmitArgs() interface{} {
	return &SubmitArgs{}
}

func newSubmitResult() interface{} {
	return &SubmitResult{}
}

type SubmitArgs struct {
	Req *userOrder.OrderSubmitReq
}

func (p *SubmitArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(userOrder.OrderSubmitReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SubmitArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SubmitArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SubmitArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SubmitArgs) Unmarshal(in []byte) error {
	msg := new(userOrder.OrderSubmitReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SubmitArgs_Req_DEFAULT *userOrder.OrderSubmitReq

func (p *SubmitArgs) GetReq() *userOrder.OrderSubmitReq {
	if !p.IsSetReq() {
		return SubmitArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SubmitArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SubmitArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SubmitResult struct {
	Success *userOrder.OrderSubmitResp
}

var SubmitResult_Success_DEFAULT *userOrder.OrderSubmitResp

func (p *SubmitResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(userOrder.OrderSubmitResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SubmitResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SubmitResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SubmitResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SubmitResult) Unmarshal(in []byte) error {
	msg := new(userOrder.OrderSubmitResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SubmitResult) GetSuccess() *userOrder.OrderSubmitResp {
	if !p.IsSetSuccess() {
		return SubmitResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SubmitResult) SetSuccess(x interface{}) {
	p.Success = x.(*userOrder.OrderSubmitResp)
}

func (p *SubmitResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SubmitResult) GetResult() interface{} {
	return p.Success
}

func historyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userOrder.HistoryReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userOrder.OrderUserService).History(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *HistoryArgs:
		success, err := handler.(userOrder.OrderUserService).History(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*HistoryResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newHistoryArgs() interface{} {
	return &HistoryArgs{}
}

func newHistoryResult() interface{} {
	return &HistoryResult{}
}

type HistoryArgs struct {
	Req *userOrder.HistoryReq
}

func (p *HistoryArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(userOrder.HistoryReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *HistoryArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *HistoryArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *HistoryArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *HistoryArgs) Unmarshal(in []byte) error {
	msg := new(userOrder.HistoryReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var HistoryArgs_Req_DEFAULT *userOrder.HistoryReq

func (p *HistoryArgs) GetReq() *userOrder.HistoryReq {
	if !p.IsSetReq() {
		return HistoryArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *HistoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *HistoryArgs) GetFirstArgument() interface{} {
	return p.Req
}

type HistoryResult struct {
	Success *userOrder.HistoryResp
}

var HistoryResult_Success_DEFAULT *userOrder.HistoryResp

func (p *HistoryResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(userOrder.HistoryResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *HistoryResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *HistoryResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *HistoryResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *HistoryResult) Unmarshal(in []byte) error {
	msg := new(userOrder.HistoryResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *HistoryResult) GetSuccess() *userOrder.HistoryResp {
	if !p.IsSetSuccess() {
		return HistoryResult_Success_DEFAULT
	}
	return p.Success
}

func (p *HistoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*userOrder.HistoryResp)
}

func (p *HistoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HistoryResult) GetResult() interface{} {
	return p.Success
}

func detailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(order_common.OrderReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userOrder.OrderUserService).Detail(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DetailArgs:
		success, err := handler.(userOrder.OrderUserService).Detail(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DetailResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDetailArgs() interface{} {
	return &DetailArgs{}
}

func newDetailResult() interface{} {
	return &DetailResult{}
}

type DetailArgs struct {
	Req *order_common.OrderReq
}

func (p *DetailArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(order_common.OrderReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DetailArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DetailArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DetailArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DetailArgs) Unmarshal(in []byte) error {
	msg := new(order_common.OrderReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DetailArgs_Req_DEFAULT *order_common.OrderReq

func (p *DetailArgs) GetReq() *order_common.OrderReq {
	if !p.IsSetReq() {
		return DetailArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DetailArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DetailResult struct {
	Success *order_common.OrderResp
}

var DetailResult_Success_DEFAULT *order_common.OrderResp

func (p *DetailResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(order_common.OrderResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DetailResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DetailResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DetailResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DetailResult) Unmarshal(in []byte) error {
	msg := new(order_common.OrderResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DetailResult) GetSuccess() *order_common.OrderResp {
	if !p.IsSetSuccess() {
		return DetailResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DetailResult) SetSuccess(x interface{}) {
	p.Success = x.(*order_common.OrderResp)
}

func (p *DetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DetailResult) GetResult() interface{} {
	return p.Success
}

func cancelHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(order_common.CancelReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userOrder.OrderUserService).Cancel(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CancelArgs:
		success, err := handler.(userOrder.OrderUserService).Cancel(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CancelResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCancelArgs() interface{} {
	return &CancelArgs{}
}

func newCancelResult() interface{} {
	return &CancelResult{}
}

type CancelArgs struct {
	Req *order_common.CancelReq
}

func (p *CancelArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(order_common.CancelReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CancelArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CancelArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CancelArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CancelArgs) Unmarshal(in []byte) error {
	msg := new(order_common.CancelReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CancelArgs_Req_DEFAULT *order_common.CancelReq

func (p *CancelArgs) GetReq() *order_common.CancelReq {
	if !p.IsSetReq() {
		return CancelArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CancelArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CancelArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CancelResult struct {
	Success *order_common.Empty
}

var CancelResult_Success_DEFAULT *order_common.Empty

func (p *CancelResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(order_common.Empty)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CancelResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CancelResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CancelResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CancelResult) Unmarshal(in []byte) error {
	msg := new(order_common.Empty)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CancelResult) GetSuccess() *order_common.Empty {
	if !p.IsSetSuccess() {
		return CancelResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CancelResult) SetSuccess(x interface{}) {
	p.Success = x.(*order_common.Empty)
}

func (p *CancelResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CancelResult) GetResult() interface{} {
	return p.Success
}

func reminderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userOrder.ReminderReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userOrder.OrderUserService).Reminder(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ReminderArgs:
		success, err := handler.(userOrder.OrderUserService).Reminder(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ReminderResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newReminderArgs() interface{} {
	return &ReminderArgs{}
}

func newReminderResult() interface{} {
	return &ReminderResult{}
}

type ReminderArgs struct {
	Req *userOrder.ReminderReq
}

func (p *ReminderArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(userOrder.ReminderReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ReminderArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ReminderArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ReminderArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ReminderArgs) Unmarshal(in []byte) error {
	msg := new(userOrder.ReminderReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ReminderArgs_Req_DEFAULT *userOrder.ReminderReq

func (p *ReminderArgs) GetReq() *userOrder.ReminderReq {
	if !p.IsSetReq() {
		return ReminderArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ReminderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ReminderArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ReminderResult struct {
	Success *order_common.Empty
}

var ReminderResult_Success_DEFAULT *order_common.Empty

func (p *ReminderResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(order_common.Empty)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ReminderResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ReminderResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ReminderResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ReminderResult) Unmarshal(in []byte) error {
	msg := new(order_common.Empty)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ReminderResult) GetSuccess() *order_common.Empty {
	if !p.IsSetSuccess() {
		return ReminderResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ReminderResult) SetSuccess(x interface{}) {
	p.Success = x.(*order_common.Empty)
}

func (p *ReminderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ReminderResult) GetResult() interface{} {
	return p.Success
}

func completeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userOrder.CompleteReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userOrder.OrderUserService).Complete(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CompleteArgs:
		success, err := handler.(userOrder.OrderUserService).Complete(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CompleteResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCompleteArgs() interface{} {
	return &CompleteArgs{}
}

func newCompleteResult() interface{} {
	return &CompleteResult{}
}

type CompleteArgs struct {
	Req *userOrder.CompleteReq
}

func (p *CompleteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(userOrder.CompleteReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CompleteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CompleteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CompleteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CompleteArgs) Unmarshal(in []byte) error {
	msg := new(userOrder.CompleteReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CompleteArgs_Req_DEFAULT *userOrder.CompleteReq

func (p *CompleteArgs) GetReq() *userOrder.CompleteReq {
	if !p.IsSetReq() {
		return CompleteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CompleteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CompleteArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CompleteResult struct {
	Success *order_common.Empty
}

var CompleteResult_Success_DEFAULT *order_common.Empty

func (p *CompleteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(order_common.Empty)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CompleteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CompleteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CompleteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CompleteResult) Unmarshal(in []byte) error {
	msg := new(order_common.Empty)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CompleteResult) GetSuccess() *order_common.Empty {
	if !p.IsSetSuccess() {
		return CompleteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CompleteResult) SetSuccess(x interface{}) {
	p.Success = x.(*order_common.Empty)
}

func (p *CompleteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CompleteResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Submit(ctx context.Context, Req *userOrder.OrderSubmitReq) (r *userOrder.OrderSubmitResp, err error) {
	var _args SubmitArgs
	_args.Req = Req
	var _result SubmitResult
	if err = p.c.Call(ctx, "Submit", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) History(ctx context.Context, Req *userOrder.HistoryReq) (r *userOrder.HistoryResp, err error) {
	var _args HistoryArgs
	_args.Req = Req
	var _result HistoryResult
	if err = p.c.Call(ctx, "History", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Detail(ctx context.Context, Req *order_common.OrderReq) (r *order_common.OrderResp, err error) {
	var _args DetailArgs
	_args.Req = Req
	var _result DetailResult
	if err = p.c.Call(ctx, "Detail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Cancel(ctx context.Context, Req *order_common.CancelReq) (r *order_common.Empty, err error) {
	var _args CancelArgs
	_args.Req = Req
	var _result CancelResult
	if err = p.c.Call(ctx, "Cancel", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Reminder(ctx context.Context, Req *userOrder.ReminderReq) (r *order_common.Empty, err error) {
	var _args ReminderArgs
	_args.Req = Req
	var _result ReminderResult
	if err = p.c.Call(ctx, "Reminder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Complete(ctx context.Context, Req *userOrder.CompleteReq) (r *order_common.Empty, err error) {
	var _args CompleteArgs
	_args.Req = Req
	var _result CompleteResult
	if err = p.c.Call(ctx, "Complete", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
