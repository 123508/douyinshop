// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package userOrder

import (
	fmt "fmt"
	order_common "github.com/123508/douyinshop/kitex_gen/order/order_common"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *OrderSubmitReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_OrderSubmitReq[number], err)
}

func (x *OrderSubmitReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *OrderSubmitReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.AddressBookId, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *OrderSubmitReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.PayMethod, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *OrderSubmitReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Remark, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *OrderSubmitReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Amount, offset, err = fastpb.ReadFloat(buf, _type)
	return offset, err
}

func (x *OrderSubmitReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v order_common.OrderReq
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Order = &v
	return offset, nil
}

func (x *OrderSubmitResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_OrderSubmitResp[number], err)
}

func (x *OrderSubmitResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *OrderSubmitResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Number, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *OrderSubmitResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.OrderAmount, offset, err = fastpb.ReadFloat(buf, _type)
	return offset, err
}

func (x *HistoryReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_HistoryReq[number], err)
}

func (x *HistoryReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *HistoryReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Page, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *HistoryReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.PageSize, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *HistoryReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *HistoryResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_HistoryResp[number], err)
}

func (x *HistoryResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *HistoryResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v order_common.OrderResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.List = append(x.List, &v)
	return offset, nil
}

func (x *HistoryResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Page, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *HistoryResp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.PageSize, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *ReminderReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ReminderReq[number], err)
}

func (x *ReminderReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *ReminderReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *CompleteReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CompleteReq[number], err)
}

func (x *CompleteReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *OrderSubmitReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *OrderSubmitReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *OrderSubmitReq) fastWriteField2(buf []byte) (offset int) {
	if x.AddressBookId == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetAddressBookId())
	return offset
}

func (x *OrderSubmitReq) fastWriteField3(buf []byte) (offset int) {
	if x.PayMethod == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, x.GetPayMethod())
	return offset
}

func (x *OrderSubmitReq) fastWriteField4(buf []byte) (offset int) {
	if x.Remark == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetRemark())
	return offset
}

func (x *OrderSubmitReq) fastWriteField5(buf []byte) (offset int) {
	if x.Amount == 0 {
		return offset
	}
	offset += fastpb.WriteFloat(buf[offset:], 5, x.GetAmount())
	return offset
}

func (x *OrderSubmitReq) fastWriteField6(buf []byte) (offset int) {
	if x.Order == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 6, x.GetOrder())
	return offset
}

func (x *OrderSubmitResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *OrderSubmitResp) fastWriteField1(buf []byte) (offset int) {
	if x.OrderId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetOrderId())
	return offset
}

func (x *OrderSubmitResp) fastWriteField2(buf []byte) (offset int) {
	if x.Number == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetNumber())
	return offset
}

func (x *OrderSubmitResp) fastWriteField3(buf []byte) (offset int) {
	if x.OrderAmount == 0 {
		return offset
	}
	offset += fastpb.WriteFloat(buf[offset:], 3, x.GetOrderAmount())
	return offset
}

func (x *HistoryReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *HistoryReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *HistoryReq) fastWriteField2(buf []byte) (offset int) {
	if x.Page == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 2, x.GetPage())
	return offset
}

func (x *HistoryReq) fastWriteField3(buf []byte) (offset int) {
	if x.PageSize == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 3, x.GetPageSize())
	return offset
}

func (x *HistoryReq) fastWriteField4(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, x.GetStatus())
	return offset
}

func (x *HistoryResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *HistoryResp) fastWriteField1(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetTotal())
	return offset
}

func (x *HistoryResp) fastWriteField2(buf []byte) (offset int) {
	if x.List == nil {
		return offset
	}
	for i := range x.GetList() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetList()[i])
	}
	return offset
}

func (x *HistoryResp) fastWriteField3(buf []byte) (offset int) {
	if x.Page == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 3, x.GetPage())
	return offset
}

func (x *HistoryResp) fastWriteField4(buf []byte) (offset int) {
	if x.PageSize == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 4, x.GetPageSize())
	return offset
}

func (x *ReminderReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ReminderReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *ReminderReq) fastWriteField2(buf []byte) (offset int) {
	if x.OrderId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 2, x.GetOrderId())
	return offset
}

func (x *CompleteReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CompleteReq) fastWriteField1(buf []byte) (offset int) {
	if x.OrderId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetOrderId())
	return offset
}

func (x *OrderSubmitReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *OrderSubmitReq) sizeField1() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetUserId())
	return n
}

func (x *OrderSubmitReq) sizeField2() (n int) {
	if x.AddressBookId == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetAddressBookId())
	return n
}

func (x *OrderSubmitReq) sizeField3() (n int) {
	if x.PayMethod == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, x.GetPayMethod())
	return n
}

func (x *OrderSubmitReq) sizeField4() (n int) {
	if x.Remark == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetRemark())
	return n
}

func (x *OrderSubmitReq) sizeField5() (n int) {
	if x.Amount == 0 {
		return n
	}
	n += fastpb.SizeFloat(5, x.GetAmount())
	return n
}

func (x *OrderSubmitReq) sizeField6() (n int) {
	if x.Order == nil {
		return n
	}
	n += fastpb.SizeMessage(6, x.GetOrder())
	return n
}

func (x *OrderSubmitResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *OrderSubmitResp) sizeField1() (n int) {
	if x.OrderId == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetOrderId())
	return n
}

func (x *OrderSubmitResp) sizeField2() (n int) {
	if x.Number == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetNumber())
	return n
}

func (x *OrderSubmitResp) sizeField3() (n int) {
	if x.OrderAmount == 0 {
		return n
	}
	n += fastpb.SizeFloat(3, x.GetOrderAmount())
	return n
}

func (x *HistoryReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *HistoryReq) sizeField1() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetUserId())
	return n
}

func (x *HistoryReq) sizeField2() (n int) {
	if x.Page == 0 {
		return n
	}
	n += fastpb.SizeUint32(2, x.GetPage())
	return n
}

func (x *HistoryReq) sizeField3() (n int) {
	if x.PageSize == 0 {
		return n
	}
	n += fastpb.SizeUint32(3, x.GetPageSize())
	return n
}

func (x *HistoryReq) sizeField4() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, x.GetStatus())
	return n
}

func (x *HistoryResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *HistoryResp) sizeField1() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetTotal())
	return n
}

func (x *HistoryResp) sizeField2() (n int) {
	if x.List == nil {
		return n
	}
	for i := range x.GetList() {
		n += fastpb.SizeMessage(2, x.GetList()[i])
	}
	return n
}

func (x *HistoryResp) sizeField3() (n int) {
	if x.Page == 0 {
		return n
	}
	n += fastpb.SizeUint32(3, x.GetPage())
	return n
}

func (x *HistoryResp) sizeField4() (n int) {
	if x.PageSize == 0 {
		return n
	}
	n += fastpb.SizeUint32(4, x.GetPageSize())
	return n
}

func (x *ReminderReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ReminderReq) sizeField1() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetUserId())
	return n
}

func (x *ReminderReq) sizeField2() (n int) {
	if x.OrderId == 0 {
		return n
	}
	n += fastpb.SizeUint32(2, x.GetOrderId())
	return n
}

func (x *CompleteReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CompleteReq) sizeField1() (n int) {
	if x.OrderId == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetOrderId())
	return n
}

var fieldIDToName_OrderSubmitReq = map[int32]string{
	1: "UserId",
	2: "AddressBookId",
	3: "PayMethod",
	4: "Remark",
	5: "Amount",
	6: "Order",
}

var fieldIDToName_OrderSubmitResp = map[int32]string{
	1: "OrderId",
	2: "Number",
	3: "OrderAmount",
}

var fieldIDToName_HistoryReq = map[int32]string{
	1: "UserId",
	2: "Page",
	3: "PageSize",
	4: "Status",
}

var fieldIDToName_HistoryResp = map[int32]string{
	1: "Total",
	2: "List",
	3: "Page",
	4: "PageSize",
}

var fieldIDToName_ReminderReq = map[int32]string{
	1: "UserId",
	2: "OrderId",
}

var fieldIDToName_CompleteReq = map[int32]string{
	1: "OrderId",
}

var _ = order_common.File_order_bitjump_order_common_proto
