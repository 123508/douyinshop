// Code generated by Kitex v0.12.1. DO NOT EDIT.

package aiservice

import (
	"context"
	"errors"
	ai "github.com/123508/douyinshop/kitex_gen/ai"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"OrderQuery": kitex.NewMethodInfo(
		orderQueryHandler,
		newOrderQueryArgs,
		newOrderQueryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"AutoPlaceOrder": kitex.NewMethodInfo(
		autoPlaceOrderHandler,
		newAutoPlaceOrderArgs,
		newAutoPlaceOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	aiServiceServiceInfo                = NewServiceInfo()
	aiServiceServiceInfoForClient       = NewServiceInfoForClient()
	aiServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return aiServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return aiServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return aiServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "AiService"
	handlerType := (*ai.AiService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "ai",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.1",
		Extra:           extra,
	}
	return svcInfo
}

func orderQueryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(ai.OrderQueryReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(ai.AiService).OrderQuery(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *OrderQueryArgs:
		success, err := handler.(ai.AiService).OrderQuery(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*OrderQueryResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newOrderQueryArgs() interface{} {
	return &OrderQueryArgs{}
}

func newOrderQueryResult() interface{} {
	return &OrderQueryResult{}
}

type OrderQueryArgs struct {
	Req *ai.OrderQueryReq
}

func (p *OrderQueryArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(ai.OrderQueryReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *OrderQueryArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *OrderQueryArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *OrderQueryArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *OrderQueryArgs) Unmarshal(in []byte) error {
	msg := new(ai.OrderQueryReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var OrderQueryArgs_Req_DEFAULT *ai.OrderQueryReq

func (p *OrderQueryArgs) GetReq() *ai.OrderQueryReq {
	if !p.IsSetReq() {
		return OrderQueryArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *OrderQueryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderQueryArgs) GetFirstArgument() interface{} {
	return p.Req
}

type OrderQueryResult struct {
	Success *ai.OrderQueryResp
}

var OrderQueryResult_Success_DEFAULT *ai.OrderQueryResp

func (p *OrderQueryResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(ai.OrderQueryResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *OrderQueryResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *OrderQueryResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *OrderQueryResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *OrderQueryResult) Unmarshal(in []byte) error {
	msg := new(ai.OrderQueryResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *OrderQueryResult) GetSuccess() *ai.OrderQueryResp {
	if !p.IsSetSuccess() {
		return OrderQueryResult_Success_DEFAULT
	}
	return p.Success
}

func (p *OrderQueryResult) SetSuccess(x interface{}) {
	p.Success = x.(*ai.OrderQueryResp)
}

func (p *OrderQueryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderQueryResult) GetResult() interface{} {
	return p.Success
}

func autoPlaceOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(ai.AutoPlaceOrderReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(ai.AiService).AutoPlaceOrder(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *AutoPlaceOrderArgs:
		success, err := handler.(ai.AiService).AutoPlaceOrder(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AutoPlaceOrderResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newAutoPlaceOrderArgs() interface{} {
	return &AutoPlaceOrderArgs{}
}

func newAutoPlaceOrderResult() interface{} {
	return &AutoPlaceOrderResult{}
}

type AutoPlaceOrderArgs struct {
	Req *ai.AutoPlaceOrderReq
}

func (p *AutoPlaceOrderArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(ai.AutoPlaceOrderReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AutoPlaceOrderArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AutoPlaceOrderArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AutoPlaceOrderArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *AutoPlaceOrderArgs) Unmarshal(in []byte) error {
	msg := new(ai.AutoPlaceOrderReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AutoPlaceOrderArgs_Req_DEFAULT *ai.AutoPlaceOrderReq

func (p *AutoPlaceOrderArgs) GetReq() *ai.AutoPlaceOrderReq {
	if !p.IsSetReq() {
		return AutoPlaceOrderArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AutoPlaceOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AutoPlaceOrderArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AutoPlaceOrderResult struct {
	Success *ai.AutoPlaceOrderResp
}

var AutoPlaceOrderResult_Success_DEFAULT *ai.AutoPlaceOrderResp

func (p *AutoPlaceOrderResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(ai.AutoPlaceOrderResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AutoPlaceOrderResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AutoPlaceOrderResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AutoPlaceOrderResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *AutoPlaceOrderResult) Unmarshal(in []byte) error {
	msg := new(ai.AutoPlaceOrderResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AutoPlaceOrderResult) GetSuccess() *ai.AutoPlaceOrderResp {
	if !p.IsSetSuccess() {
		return AutoPlaceOrderResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AutoPlaceOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*ai.AutoPlaceOrderResp)
}

func (p *AutoPlaceOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AutoPlaceOrderResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) OrderQuery(ctx context.Context, Req *ai.OrderQueryReq) (r *ai.OrderQueryResp, err error) {
	var _args OrderQueryArgs
	_args.Req = Req
	var _result OrderQueryResult
	if err = p.c.Call(ctx, "OrderQuery", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AutoPlaceOrder(ctx context.Context, Req *ai.AutoPlaceOrderReq) (r *ai.AutoPlaceOrderResp, err error) {
	var _args AutoPlaceOrderArgs
	_args.Req = Req
	var _result AutoPlaceOrderResult
	if err = p.c.Call(ctx, "AutoPlaceOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
