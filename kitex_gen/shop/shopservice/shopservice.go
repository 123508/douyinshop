// Code generated by Kitex v0.12.1. DO NOT EDIT.

package shopservice

import (
	"context"
	"errors"
	shop "github.com/123508/douyinshop/kitex_gen/shop"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Register": kitex.NewMethodInfo(
		registerHandler,
		newRegisterArgs,
		newRegisterResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetShopId": kitex.NewMethodInfo(
		getShopIdHandler,
		newGetShopIdArgs,
		newGetShopIdResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetShopInfo": kitex.NewMethodInfo(
		getShopInfoHandler,
		newGetShopInfoArgs,
		newGetShopInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateShopInfo": kitex.NewMethodInfo(
		updateShopInfoHandler,
		newUpdateShopInfoArgs,
		newUpdateShopInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"AddProduct": kitex.NewMethodInfo(
		addProductHandler,
		newAddProductArgs,
		newAddProductResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteProduct": kitex.NewMethodInfo(
		deleteProductHandler,
		newDeleteProductArgs,
		newDeleteProductResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateProduct": kitex.NewMethodInfo(
		updateProductHandler,
		newUpdateProductArgs,
		newUpdateProductResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetProductList": kitex.NewMethodInfo(
		getProductListHandler,
		newGetProductListArgs,
		newGetProductListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	shopServiceServiceInfo                = NewServiceInfo()
	shopServiceServiceInfoForClient       = NewServiceInfoForClient()
	shopServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return shopServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return shopServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return shopServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ShopService"
	handlerType := (*shop.ShopService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "shop",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.1",
		Extra:           extra,
	}
	return svcInfo
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(shop.RegisterShopReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(shop.ShopService).Register(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *RegisterArgs:
		success, err := handler.(shop.ShopService).Register(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RegisterResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newRegisterArgs() interface{} {
	return &RegisterArgs{}
}

func newRegisterResult() interface{} {
	return &RegisterResult{}
}

type RegisterArgs struct {
	Req *shop.RegisterShopReq
}

func (p *RegisterArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(shop.RegisterShopReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RegisterArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RegisterArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RegisterArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RegisterArgs) Unmarshal(in []byte) error {
	msg := new(shop.RegisterShopReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RegisterArgs_Req_DEFAULT *shop.RegisterShopReq

func (p *RegisterArgs) GetReq() *shop.RegisterShopReq {
	if !p.IsSetReq() {
		return RegisterArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RegisterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RegisterArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RegisterResult struct {
	Success *shop.RegisterShopResp
}

var RegisterResult_Success_DEFAULT *shop.RegisterShopResp

func (p *RegisterResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(shop.RegisterShopResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RegisterResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RegisterResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RegisterResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RegisterResult) Unmarshal(in []byte) error {
	msg := new(shop.RegisterShopResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RegisterResult) GetSuccess() *shop.RegisterShopResp {
	if !p.IsSetSuccess() {
		return RegisterResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RegisterResult) SetSuccess(x interface{}) {
	p.Success = x.(*shop.RegisterShopResp)
}

func (p *RegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RegisterResult) GetResult() interface{} {
	return p.Success
}

func getShopIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(shop.GetShopIdReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(shop.ShopService).GetShopId(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetShopIdArgs:
		success, err := handler.(shop.ShopService).GetShopId(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetShopIdResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetShopIdArgs() interface{} {
	return &GetShopIdArgs{}
}

func newGetShopIdResult() interface{} {
	return &GetShopIdResult{}
}

type GetShopIdArgs struct {
	Req *shop.GetShopIdReq
}

func (p *GetShopIdArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(shop.GetShopIdReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetShopIdArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetShopIdArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetShopIdArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetShopIdArgs) Unmarshal(in []byte) error {
	msg := new(shop.GetShopIdReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetShopIdArgs_Req_DEFAULT *shop.GetShopIdReq

func (p *GetShopIdArgs) GetReq() *shop.GetShopIdReq {
	if !p.IsSetReq() {
		return GetShopIdArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetShopIdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetShopIdArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetShopIdResult struct {
	Success *shop.GetShopIdResp
}

var GetShopIdResult_Success_DEFAULT *shop.GetShopIdResp

func (p *GetShopIdResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(shop.GetShopIdResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetShopIdResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetShopIdResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetShopIdResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetShopIdResult) Unmarshal(in []byte) error {
	msg := new(shop.GetShopIdResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetShopIdResult) GetSuccess() *shop.GetShopIdResp {
	if !p.IsSetSuccess() {
		return GetShopIdResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetShopIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*shop.GetShopIdResp)
}

func (p *GetShopIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetShopIdResult) GetResult() interface{} {
	return p.Success
}

func getShopInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(shop.GetShopInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(shop.ShopService).GetShopInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetShopInfoArgs:
		success, err := handler.(shop.ShopService).GetShopInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetShopInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetShopInfoArgs() interface{} {
	return &GetShopInfoArgs{}
}

func newGetShopInfoResult() interface{} {
	return &GetShopInfoResult{}
}

type GetShopInfoArgs struct {
	Req *shop.GetShopInfoReq
}

func (p *GetShopInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(shop.GetShopInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetShopInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetShopInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetShopInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetShopInfoArgs) Unmarshal(in []byte) error {
	msg := new(shop.GetShopInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetShopInfoArgs_Req_DEFAULT *shop.GetShopInfoReq

func (p *GetShopInfoArgs) GetReq() *shop.GetShopInfoReq {
	if !p.IsSetReq() {
		return GetShopInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetShopInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetShopInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetShopInfoResult struct {
	Success *shop.GetShopInfoResp
}

var GetShopInfoResult_Success_DEFAULT *shop.GetShopInfoResp

func (p *GetShopInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(shop.GetShopInfoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetShopInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetShopInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetShopInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetShopInfoResult) Unmarshal(in []byte) error {
	msg := new(shop.GetShopInfoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetShopInfoResult) GetSuccess() *shop.GetShopInfoResp {
	if !p.IsSetSuccess() {
		return GetShopInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetShopInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*shop.GetShopInfoResp)
}

func (p *GetShopInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetShopInfoResult) GetResult() interface{} {
	return p.Success
}

func updateShopInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(shop.UpdateShopInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(shop.ShopService).UpdateShopInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateShopInfoArgs:
		success, err := handler.(shop.ShopService).UpdateShopInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateShopInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateShopInfoArgs() interface{} {
	return &UpdateShopInfoArgs{}
}

func newUpdateShopInfoResult() interface{} {
	return &UpdateShopInfoResult{}
}

type UpdateShopInfoArgs struct {
	Req *shop.UpdateShopInfoReq
}

func (p *UpdateShopInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(shop.UpdateShopInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateShopInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateShopInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateShopInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateShopInfoArgs) Unmarshal(in []byte) error {
	msg := new(shop.UpdateShopInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateShopInfoArgs_Req_DEFAULT *shop.UpdateShopInfoReq

func (p *UpdateShopInfoArgs) GetReq() *shop.UpdateShopInfoReq {
	if !p.IsSetReq() {
		return UpdateShopInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateShopInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateShopInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateShopInfoResult struct {
	Success *shop.UpdateShopInfoResp
}

var UpdateShopInfoResult_Success_DEFAULT *shop.UpdateShopInfoResp

func (p *UpdateShopInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(shop.UpdateShopInfoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateShopInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateShopInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateShopInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateShopInfoResult) Unmarshal(in []byte) error {
	msg := new(shop.UpdateShopInfoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateShopInfoResult) GetSuccess() *shop.UpdateShopInfoResp {
	if !p.IsSetSuccess() {
		return UpdateShopInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateShopInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*shop.UpdateShopInfoResp)
}

func (p *UpdateShopInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateShopInfoResult) GetResult() interface{} {
	return p.Success
}

func addProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(shop.AddProductReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(shop.ShopService).AddProduct(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *AddProductArgs:
		success, err := handler.(shop.ShopService).AddProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AddProductResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newAddProductArgs() interface{} {
	return &AddProductArgs{}
}

func newAddProductResult() interface{} {
	return &AddProductResult{}
}

type AddProductArgs struct {
	Req *shop.AddProductReq
}

func (p *AddProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(shop.AddProductReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AddProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AddProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AddProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *AddProductArgs) Unmarshal(in []byte) error {
	msg := new(shop.AddProductReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AddProductArgs_Req_DEFAULT *shop.AddProductReq

func (p *AddProductArgs) GetReq() *shop.AddProductReq {
	if !p.IsSetReq() {
		return AddProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AddProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AddProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AddProductResult struct {
	Success *shop.AddProductResp
}

var AddProductResult_Success_DEFAULT *shop.AddProductResp

func (p *AddProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(shop.AddProductResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AddProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AddProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AddProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *AddProductResult) Unmarshal(in []byte) error {
	msg := new(shop.AddProductResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AddProductResult) GetSuccess() *shop.AddProductResp {
	if !p.IsSetSuccess() {
		return AddProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AddProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*shop.AddProductResp)
}

func (p *AddProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AddProductResult) GetResult() interface{} {
	return p.Success
}

func deleteProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(shop.DeleteProductReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(shop.ShopService).DeleteProduct(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteProductArgs:
		success, err := handler.(shop.ShopService).DeleteProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteProductResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteProductArgs() interface{} {
	return &DeleteProductArgs{}
}

func newDeleteProductResult() interface{} {
	return &DeleteProductResult{}
}

type DeleteProductArgs struct {
	Req *shop.DeleteProductReq
}

func (p *DeleteProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(shop.DeleteProductReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteProductArgs) Unmarshal(in []byte) error {
	msg := new(shop.DeleteProductReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteProductArgs_Req_DEFAULT *shop.DeleteProductReq

func (p *DeleteProductArgs) GetReq() *shop.DeleteProductReq {
	if !p.IsSetReq() {
		return DeleteProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteProductResult struct {
	Success *shop.DeleteProductResp
}

var DeleteProductResult_Success_DEFAULT *shop.DeleteProductResp

func (p *DeleteProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(shop.DeleteProductResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteProductResult) Unmarshal(in []byte) error {
	msg := new(shop.DeleteProductResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteProductResult) GetSuccess() *shop.DeleteProductResp {
	if !p.IsSetSuccess() {
		return DeleteProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*shop.DeleteProductResp)
}

func (p *DeleteProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteProductResult) GetResult() interface{} {
	return p.Success
}

func updateProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(shop.UpdateProductReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(shop.ShopService).UpdateProduct(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateProductArgs:
		success, err := handler.(shop.ShopService).UpdateProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateProductResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateProductArgs() interface{} {
	return &UpdateProductArgs{}
}

func newUpdateProductResult() interface{} {
	return &UpdateProductResult{}
}

type UpdateProductArgs struct {
	Req *shop.UpdateProductReq
}

func (p *UpdateProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(shop.UpdateProductReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateProductArgs) Unmarshal(in []byte) error {
	msg := new(shop.UpdateProductReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateProductArgs_Req_DEFAULT *shop.UpdateProductReq

func (p *UpdateProductArgs) GetReq() *shop.UpdateProductReq {
	if !p.IsSetReq() {
		return UpdateProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateProductResult struct {
	Success *shop.UpdateProductResp
}

var UpdateProductResult_Success_DEFAULT *shop.UpdateProductResp

func (p *UpdateProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(shop.UpdateProductResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateProductResult) Unmarshal(in []byte) error {
	msg := new(shop.UpdateProductResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateProductResult) GetSuccess() *shop.UpdateProductResp {
	if !p.IsSetSuccess() {
		return UpdateProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*shop.UpdateProductResp)
}

func (p *UpdateProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateProductResult) GetResult() interface{} {
	return p.Success
}

func getProductListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(shop.GetProductListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(shop.ShopService).GetProductList(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetProductListArgs:
		success, err := handler.(shop.ShopService).GetProductList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetProductListResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetProductListArgs() interface{} {
	return &GetProductListArgs{}
}

func newGetProductListResult() interface{} {
	return &GetProductListResult{}
}

type GetProductListArgs struct {
	Req *shop.GetProductListReq
}

func (p *GetProductListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(shop.GetProductListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetProductListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetProductListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetProductListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetProductListArgs) Unmarshal(in []byte) error {
	msg := new(shop.GetProductListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetProductListArgs_Req_DEFAULT *shop.GetProductListReq

func (p *GetProductListArgs) GetReq() *shop.GetProductListReq {
	if !p.IsSetReq() {
		return GetProductListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetProductListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetProductListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetProductListResult struct {
	Success *shop.GetProductListResp
}

var GetProductListResult_Success_DEFAULT *shop.GetProductListResp

func (p *GetProductListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(shop.GetProductListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetProductListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetProductListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetProductListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetProductListResult) Unmarshal(in []byte) error {
	msg := new(shop.GetProductListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetProductListResult) GetSuccess() *shop.GetProductListResp {
	if !p.IsSetSuccess() {
		return GetProductListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetProductListResult) SetSuccess(x interface{}) {
	p.Success = x.(*shop.GetProductListResp)
}

func (p *GetProductListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetProductListResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Register(ctx context.Context, Req *shop.RegisterShopReq) (r *shop.RegisterShopResp, err error) {
	var _args RegisterArgs
	_args.Req = Req
	var _result RegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetShopId(ctx context.Context, Req *shop.GetShopIdReq) (r *shop.GetShopIdResp, err error) {
	var _args GetShopIdArgs
	_args.Req = Req
	var _result GetShopIdResult
	if err = p.c.Call(ctx, "GetShopId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetShopInfo(ctx context.Context, Req *shop.GetShopInfoReq) (r *shop.GetShopInfoResp, err error) {
	var _args GetShopInfoArgs
	_args.Req = Req
	var _result GetShopInfoResult
	if err = p.c.Call(ctx, "GetShopInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateShopInfo(ctx context.Context, Req *shop.UpdateShopInfoReq) (r *shop.UpdateShopInfoResp, err error) {
	var _args UpdateShopInfoArgs
	_args.Req = Req
	var _result UpdateShopInfoResult
	if err = p.c.Call(ctx, "UpdateShopInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddProduct(ctx context.Context, Req *shop.AddProductReq) (r *shop.AddProductResp, err error) {
	var _args AddProductArgs
	_args.Req = Req
	var _result AddProductResult
	if err = p.c.Call(ctx, "AddProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteProduct(ctx context.Context, Req *shop.DeleteProductReq) (r *shop.DeleteProductResp, err error) {
	var _args DeleteProductArgs
	_args.Req = Req
	var _result DeleteProductResult
	if err = p.c.Call(ctx, "DeleteProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateProduct(ctx context.Context, Req *shop.UpdateProductReq) (r *shop.UpdateProductResp, err error) {
	var _args UpdateProductArgs
	_args.Req = Req
	var _result UpdateProductResult
	if err = p.c.Call(ctx, "UpdateProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetProductList(ctx context.Context, Req *shop.GetProductListReq) (r *shop.GetProductListResp, err error) {
	var _args GetProductListArgs
	_args.Req = Req
	var _result GetProductListResult
	if err = p.c.Call(ctx, "GetProductList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
