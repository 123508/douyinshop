// Code generated by Kitex v0.12.1. DO NOT EDIT.

package shopservice

import (
	"context"
	shop "github.com/123508/douyinshop/kitex_gen/shop"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Register(ctx context.Context, Req *shop.RegisterShopReq, callOptions ...callopt.Option) (r *shop.RegisterShopResp, err error)
	GetShopId(ctx context.Context, Req *shop.GetShopIdReq, callOptions ...callopt.Option) (r *shop.GetShopIdResp, err error)
	GetShopInfo(ctx context.Context, Req *shop.GetShopInfoReq, callOptions ...callopt.Option) (r *shop.GetShopInfoResp, err error)
	UpdateShopInfo(ctx context.Context, Req *shop.UpdateShopInfoReq, callOptions ...callopt.Option) (r *shop.UpdateShopInfoResp, err error)
	AddProduct(ctx context.Context, Req *shop.AddProductReq, callOptions ...callopt.Option) (r *shop.AddProductResp, err error)
	DeleteProduct(ctx context.Context, Req *shop.DeleteProductReq, callOptions ...callopt.Option) (r *shop.DeleteProductResp, err error)
	UpdateProduct(ctx context.Context, Req *shop.UpdateProductReq, callOptions ...callopt.Option) (r *shop.UpdateProductResp, err error)
	GetProductList(ctx context.Context, Req *shop.GetProductListReq, callOptions ...callopt.Option) (r *shop.GetProductListResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kShopServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kShopServiceClient struct {
	*kClient
}

func (p *kShopServiceClient) Register(ctx context.Context, Req *shop.RegisterShopReq, callOptions ...callopt.Option) (r *shop.RegisterShopResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Register(ctx, Req)
}

func (p *kShopServiceClient) GetShopId(ctx context.Context, Req *shop.GetShopIdReq, callOptions ...callopt.Option) (r *shop.GetShopIdResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetShopId(ctx, Req)
}

func (p *kShopServiceClient) GetShopInfo(ctx context.Context, Req *shop.GetShopInfoReq, callOptions ...callopt.Option) (r *shop.GetShopInfoResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetShopInfo(ctx, Req)
}

func (p *kShopServiceClient) UpdateShopInfo(ctx context.Context, Req *shop.UpdateShopInfoReq, callOptions ...callopt.Option) (r *shop.UpdateShopInfoResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateShopInfo(ctx, Req)
}

func (p *kShopServiceClient) AddProduct(ctx context.Context, Req *shop.AddProductReq, callOptions ...callopt.Option) (r *shop.AddProductResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddProduct(ctx, Req)
}

func (p *kShopServiceClient) DeleteProduct(ctx context.Context, Req *shop.DeleteProductReq, callOptions ...callopt.Option) (r *shop.DeleteProductResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteProduct(ctx, Req)
}

func (p *kShopServiceClient) UpdateProduct(ctx context.Context, Req *shop.UpdateProductReq, callOptions ...callopt.Option) (r *shop.UpdateProductResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateProduct(ctx, Req)
}

func (p *kShopServiceClient) GetProductList(ctx context.Context, Req *shop.GetProductListReq, callOptions ...callopt.Option) (r *shop.GetProductListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetProductList(ctx, Req)
}
