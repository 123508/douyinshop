// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package shop

import (
	fmt "fmt"
	product "github.com/123508/douyinshop/kitex_gen/product"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *RegisterShopReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RegisterShopReq[number], err)
}

func (x *RegisterShopReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *RegisterShopReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ShopName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RegisterShopReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.ShopAddress, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RegisterShopReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.ShopDescription, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RegisterShopReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.ShopAvatar, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RegisterShopResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RegisterShopResp[number], err)
}

func (x *RegisterShopResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ShopId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *GetShopIdReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetShopIdReq[number], err)
}

func (x *GetShopIdReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *UpdateShopInfoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateShopInfoReq[number], err)
}

func (x *UpdateShopInfoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ShopId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *UpdateShopInfoReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ShopName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateShopInfoReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.ShopAddress, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateShopInfoReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.ShopDescription, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateShopInfoReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.ShopAvatar, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateShopInfoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateShopInfoResp[number], err)
}

func (x *UpdateShopInfoResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Res, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *GetShopIdResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetShopIdResp[number], err)
}

func (x *GetShopIdResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ShopId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *GetShopInfoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetShopInfoReq[number], err)
}

func (x *GetShopInfoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ShopId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *GetShopInfoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetShopInfoResp[number], err)
}

func (x *GetShopInfoResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ShopName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetShopInfoResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ShopAddress, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetShopInfoResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.ShopDescription, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetShopInfoResp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.ShopAvatar, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AddProductReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AddProductReq[number], err)
}

func (x *AddProductReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ShopId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *AddProductReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v product.Product
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Product = &v
	return offset, nil
}

func (x *AddProductReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *AddProductResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AddProductResp[number], err)
}

func (x *AddProductResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ProductId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *DeleteProductReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteProductReq[number], err)
}

func (x *DeleteProductReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ShopId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *DeleteProductReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ProductId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *DeleteProductResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteProductResp[number], err)
}

func (x *DeleteProductResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Res, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *UpdateProductReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateProductReq[number], err)
}

func (x *UpdateProductReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ShopId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *UpdateProductReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v product.Product
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Product = &v
	return offset, nil
}

func (x *UpdateProductResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateProductResp[number], err)
}

func (x *UpdateProductResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Res, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *GetProductListReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetProductListReq[number], err)
}

func (x *GetProductListReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ShopId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *GetProductListReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Page, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *GetProductListReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.PageSize, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *GetProductListResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetProductListResp[number], err)
}

func (x *GetProductListResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v product.Product
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Products = append(x.Products, &v)
	return offset, nil
}

func (x *RegisterShopReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *RegisterShopReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *RegisterShopReq) fastWriteField2(buf []byte) (offset int) {
	if x.ShopName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetShopName())
	return offset
}

func (x *RegisterShopReq) fastWriteField3(buf []byte) (offset int) {
	if x.ShopAddress == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetShopAddress())
	return offset
}

func (x *RegisterShopReq) fastWriteField4(buf []byte) (offset int) {
	if x.ShopDescription == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetShopDescription())
	return offset
}

func (x *RegisterShopReq) fastWriteField5(buf []byte) (offset int) {
	if x.ShopAvatar == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetShopAvatar())
	return offset
}

func (x *RegisterShopResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RegisterShopResp) fastWriteField1(buf []byte) (offset int) {
	if x.ShopId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetShopId())
	return offset
}

func (x *GetShopIdReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetShopIdReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *UpdateShopInfoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *UpdateShopInfoReq) fastWriteField1(buf []byte) (offset int) {
	if x.ShopId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetShopId())
	return offset
}

func (x *UpdateShopInfoReq) fastWriteField2(buf []byte) (offset int) {
	if x.ShopName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetShopName())
	return offset
}

func (x *UpdateShopInfoReq) fastWriteField3(buf []byte) (offset int) {
	if x.ShopAddress == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetShopAddress())
	return offset
}

func (x *UpdateShopInfoReq) fastWriteField4(buf []byte) (offset int) {
	if x.ShopDescription == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetShopDescription())
	return offset
}

func (x *UpdateShopInfoReq) fastWriteField5(buf []byte) (offset int) {
	if x.ShopAvatar == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetShopAvatar())
	return offset
}

func (x *UpdateShopInfoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateShopInfoResp) fastWriteField1(buf []byte) (offset int) {
	if !x.Res {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetRes())
	return offset
}

func (x *GetShopIdResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetShopIdResp) fastWriteField1(buf []byte) (offset int) {
	if x.ShopId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetShopId())
	return offset
}

func (x *GetShopInfoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetShopInfoReq) fastWriteField1(buf []byte) (offset int) {
	if x.ShopId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetShopId())
	return offset
}

func (x *GetShopInfoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *GetShopInfoResp) fastWriteField1(buf []byte) (offset int) {
	if x.ShopName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetShopName())
	return offset
}

func (x *GetShopInfoResp) fastWriteField2(buf []byte) (offset int) {
	if x.ShopAddress == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetShopAddress())
	return offset
}

func (x *GetShopInfoResp) fastWriteField3(buf []byte) (offset int) {
	if x.ShopDescription == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetShopDescription())
	return offset
}

func (x *GetShopInfoResp) fastWriteField4(buf []byte) (offset int) {
	if x.ShopAvatar == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetShopAvatar())
	return offset
}

func (x *AddProductReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *AddProductReq) fastWriteField1(buf []byte) (offset int) {
	if x.ShopId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetShopId())
	return offset
}

func (x *AddProductReq) fastWriteField2(buf []byte) (offset int) {
	if x.Product == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetProduct())
	return offset
}

func (x *AddProductReq) fastWriteField3(buf []byte) (offset int) {
	if !x.Status {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 3, x.GetStatus())
	return offset
}

func (x *AddProductResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *AddProductResp) fastWriteField1(buf []byte) (offset int) {
	if x.ProductId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetProductId())
	return offset
}

func (x *DeleteProductReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *DeleteProductReq) fastWriteField1(buf []byte) (offset int) {
	if x.ShopId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetShopId())
	return offset
}

func (x *DeleteProductReq) fastWriteField2(buf []byte) (offset int) {
	if x.ProductId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 2, x.GetProductId())
	return offset
}

func (x *DeleteProductResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteProductResp) fastWriteField1(buf []byte) (offset int) {
	if !x.Res {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetRes())
	return offset
}

func (x *UpdateProductReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateProductReq) fastWriteField1(buf []byte) (offset int) {
	if x.ShopId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetShopId())
	return offset
}

func (x *UpdateProductReq) fastWriteField2(buf []byte) (offset int) {
	if x.Product == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetProduct())
	return offset
}

func (x *UpdateProductResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateProductResp) fastWriteField1(buf []byte) (offset int) {
	if !x.Res {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetRes())
	return offset
}

func (x *GetProductListReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetProductListReq) fastWriteField1(buf []byte) (offset int) {
	if x.ShopId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetShopId())
	return offset
}

func (x *GetProductListReq) fastWriteField2(buf []byte) (offset int) {
	if x.Page == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 2, x.GetPage())
	return offset
}

func (x *GetProductListReq) fastWriteField3(buf []byte) (offset int) {
	if x.PageSize == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 3, x.GetPageSize())
	return offset
}

func (x *GetProductListResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetProductListResp) fastWriteField1(buf []byte) (offset int) {
	if x.Products == nil {
		return offset
	}
	for i := range x.GetProducts() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetProducts()[i])
	}
	return offset
}

func (x *RegisterShopReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *RegisterShopReq) sizeField1() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetUserId())
	return n
}

func (x *RegisterShopReq) sizeField2() (n int) {
	if x.ShopName == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetShopName())
	return n
}

func (x *RegisterShopReq) sizeField3() (n int) {
	if x.ShopAddress == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetShopAddress())
	return n
}

func (x *RegisterShopReq) sizeField4() (n int) {
	if x.ShopDescription == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetShopDescription())
	return n
}

func (x *RegisterShopReq) sizeField5() (n int) {
	if x.ShopAvatar == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetShopAvatar())
	return n
}

func (x *RegisterShopResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RegisterShopResp) sizeField1() (n int) {
	if x.ShopId == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetShopId())
	return n
}

func (x *GetShopIdReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetShopIdReq) sizeField1() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetUserId())
	return n
}

func (x *UpdateShopInfoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *UpdateShopInfoReq) sizeField1() (n int) {
	if x.ShopId == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetShopId())
	return n
}

func (x *UpdateShopInfoReq) sizeField2() (n int) {
	if x.ShopName == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetShopName())
	return n
}

func (x *UpdateShopInfoReq) sizeField3() (n int) {
	if x.ShopAddress == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetShopAddress())
	return n
}

func (x *UpdateShopInfoReq) sizeField4() (n int) {
	if x.ShopDescription == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetShopDescription())
	return n
}

func (x *UpdateShopInfoReq) sizeField5() (n int) {
	if x.ShopAvatar == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetShopAvatar())
	return n
}

func (x *UpdateShopInfoResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateShopInfoResp) sizeField1() (n int) {
	if !x.Res {
		return n
	}
	n += fastpb.SizeBool(1, x.GetRes())
	return n
}

func (x *GetShopIdResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetShopIdResp) sizeField1() (n int) {
	if x.ShopId == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetShopId())
	return n
}

func (x *GetShopInfoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetShopInfoReq) sizeField1() (n int) {
	if x.ShopId == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetShopId())
	return n
}

func (x *GetShopInfoResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *GetShopInfoResp) sizeField1() (n int) {
	if x.ShopName == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetShopName())
	return n
}

func (x *GetShopInfoResp) sizeField2() (n int) {
	if x.ShopAddress == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetShopAddress())
	return n
}

func (x *GetShopInfoResp) sizeField3() (n int) {
	if x.ShopDescription == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetShopDescription())
	return n
}

func (x *GetShopInfoResp) sizeField4() (n int) {
	if x.ShopAvatar == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetShopAvatar())
	return n
}

func (x *AddProductReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *AddProductReq) sizeField1() (n int) {
	if x.ShopId == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetShopId())
	return n
}

func (x *AddProductReq) sizeField2() (n int) {
	if x.Product == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetProduct())
	return n
}

func (x *AddProductReq) sizeField3() (n int) {
	if !x.Status {
		return n
	}
	n += fastpb.SizeBool(3, x.GetStatus())
	return n
}

func (x *AddProductResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *AddProductResp) sizeField1() (n int) {
	if x.ProductId == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetProductId())
	return n
}

func (x *DeleteProductReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *DeleteProductReq) sizeField1() (n int) {
	if x.ShopId == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetShopId())
	return n
}

func (x *DeleteProductReq) sizeField2() (n int) {
	if x.ProductId == 0 {
		return n
	}
	n += fastpb.SizeUint32(2, x.GetProductId())
	return n
}

func (x *DeleteProductResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteProductResp) sizeField1() (n int) {
	if !x.Res {
		return n
	}
	n += fastpb.SizeBool(1, x.GetRes())
	return n
}

func (x *UpdateProductReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateProductReq) sizeField1() (n int) {
	if x.ShopId == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetShopId())
	return n
}

func (x *UpdateProductReq) sizeField2() (n int) {
	if x.Product == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetProduct())
	return n
}

func (x *UpdateProductResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateProductResp) sizeField1() (n int) {
	if !x.Res {
		return n
	}
	n += fastpb.SizeBool(1, x.GetRes())
	return n
}

func (x *GetProductListReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetProductListReq) sizeField1() (n int) {
	if x.ShopId == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetShopId())
	return n
}

func (x *GetProductListReq) sizeField2() (n int) {
	if x.Page == 0 {
		return n
	}
	n += fastpb.SizeUint32(2, x.GetPage())
	return n
}

func (x *GetProductListReq) sizeField3() (n int) {
	if x.PageSize == 0 {
		return n
	}
	n += fastpb.SizeUint32(3, x.GetPageSize())
	return n
}

func (x *GetProductListResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetProductListResp) sizeField1() (n int) {
	if x.Products == nil {
		return n
	}
	for i := range x.GetProducts() {
		n += fastpb.SizeMessage(1, x.GetProducts()[i])
	}
	return n
}

var fieldIDToName_RegisterShopReq = map[int32]string{
	1: "UserId",
	2: "ShopName",
	3: "ShopAddress",
	4: "ShopDescription",
	5: "ShopAvatar",
}

var fieldIDToName_RegisterShopResp = map[int32]string{
	1: "ShopId",
}

var fieldIDToName_GetShopIdReq = map[int32]string{
	1: "UserId",
}

var fieldIDToName_UpdateShopInfoReq = map[int32]string{
	1: "ShopId",
	2: "ShopName",
	3: "ShopAddress",
	4: "ShopDescription",
	5: "ShopAvatar",
}

var fieldIDToName_UpdateShopInfoResp = map[int32]string{
	1: "Res",
}

var fieldIDToName_GetShopIdResp = map[int32]string{
	1: "ShopId",
}

var fieldIDToName_GetShopInfoReq = map[int32]string{
	1: "ShopId",
}

var fieldIDToName_GetShopInfoResp = map[int32]string{
	1: "ShopName",
	2: "ShopAddress",
	3: "ShopDescription",
	4: "ShopAvatar",
}

var fieldIDToName_AddProductReq = map[int32]string{
	1: "ShopId",
	2: "Product",
	3: "Status",
}

var fieldIDToName_AddProductResp = map[int32]string{
	1: "ProductId",
}

var fieldIDToName_DeleteProductReq = map[int32]string{
	1: "ShopId",
	2: "ProductId",
}

var fieldIDToName_DeleteProductResp = map[int32]string{
	1: "Res",
}

var fieldIDToName_UpdateProductReq = map[int32]string{
	1: "ShopId",
	2: "Product",
}

var fieldIDToName_UpdateProductResp = map[int32]string{
	1: "Res",
}

var fieldIDToName_GetProductListReq = map[int32]string{
	1: "ShopId",
	2: "Page",
	3: "PageSize",
}

var fieldIDToName_GetProductListResp = map[int32]string{
	1: "Products",
}

var _ = product.File_bitjump_product_proto
